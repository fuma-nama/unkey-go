overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/v1/keys.getKey"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getKey"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.GetKeyRequest{
                    KeyID: "key_1234",
                }
                ctx := context.Background()
                res, err := s.Keys.GetKey(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/keys.deleteKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteKey"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.DeleteKeyRequestBody{
                    KeyID: "key_1234",
                }
                ctx := context.Background()
                res, err := s.Keys.DeleteKey(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis.listKeys"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "listKeys"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.ListKeysRequest{
                    APIID: "api_1234",
                    Limit: unkeygo.Int64(100),
                }
                ctx := context.Background()
                res, err := s.Apis.ListKeys(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis.deleteKeys"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteKeys"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.DeleteKeysRequestBody{
                    APIID: "api_1234",
                }
                ctx := context.Background()
                res, err := s.Apis.DeleteKeys(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis.deleteApi"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "deleteApi"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.DeleteAPIRequestBody{
                    APIID: "api_1234",
                }
                ctx := context.Background()
                res, err := s.DeleteAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/keys.verifyKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "verifyKey"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.V1KeysVerifyKeyRequest{
                    APIID: unkeygo.String("api_1234"),
                    Key: "sk_1234",
                    Authorization: &components.Authorization{
                        Permissions: &components.Permissions{},
                    },
                }
                ctx := context.Background()
                res, err := s.Keys.VerifyKey(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/keys.updateKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateKey"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.UpdateKeyRequestBody{
                    KeyID: "key_123",
                    Name: unkeygo.String("Customer X"),
                    OwnerID: unkeygo.String("user_123"),
                    Meta: map[string]any{
                        "roles": []any{
                            "admin",
                            "user",
                        },
                        "stripeCustomerId": "cus_1234",
                    },
                    Expires: unkeygo.Float64(0),
                    Ratelimit: &operations.UpdateKeyRatelimit{
                        Limit: 10,
                        RefillRate: unkeygo.Int64(1),
                        RefillInterval: 60,
                    },
                    Remaining: unkeygo.Float64(1000),
                    Refill: &operations.UpdateKeyRefill{
                        Interval: operations.UpdateKeyIntervalDaily,
                        Amount: 100,
                    },
                    Enabled: unkeygo.Bool(true),
                }
                ctx := context.Background()
                res, err := s.Keys.UpdateKey(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis.createApi"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createApi"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.CreateAPIRequestBody{
                    Name: "my-api",
                }
                ctx := context.Background()
                res, err := s.CreateAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/keys.updateRemaining"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "updateRemaining"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.UpdateRemainingRequestBody{
                    KeyID: "key_123",
                    Op: operations.OpSet,
                    Value: unkeygo.Int64(1),
                }
                ctx := context.Background()
                res, err := s.Keys.UpdateRemaining(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/apis.getApi"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getApi"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.GetAPIRequest{
                    APIID: "api_1234",
                }
                ctx := context.Background()
                res, err := s.Apis.GetAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/ratelimits.limit"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "limit"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.LimitRequestBody{
                    Namespace: unkeygo.String("email.outbound"),
                    Identifier: "user_123",
                    Limit: 10,
                    Duration: 60000,
                    Cost: unkeygo.Int64(2),
                    Resources: []operations.Resources{
                        operations.Resources{
                            Type: "project",
                            ID: "p_123",
                            Name: unkeygo.String("dub"),
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Ratelimits.Limit(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/migrations.createKeys"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createKeys"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := []operations.RequestBody{
                    operations.RequestBody{
                        APIID: "api_123",
                        Name: unkeygo.String("my key"),
                        Start: unkeygo.String("unkey_32kq"),
                        OwnerID: unkeygo.String("team_123"),
                        Meta: map[string]any{
                            "billingTier": "PRO",
                            "trialEnds": "2023-06-16T17:16:37.161Z",
                        },
                        Roles: []string{
                            "admin",
                            "finance",
                        },
                        Expires: unkeygo.Int64(1623869797161),
                        Remaining: unkeygo.Int64(1000),
                        Refill: &operations.V1MigrationsCreateKeysRefill{
                            Interval: operations.V1MigrationsCreateKeysIntervalDaily,
                            Amount: 100,
                        },
                        Ratelimit: &operations.V1MigrationsCreateKeysRatelimit{
                            Limit: 10,
                            RefillRate: 1,
                            RefillInterval: 60,
                        },
                        Enabled: unkeygo.Bool(false),
                    },
                }
                ctx := context.Background()
                res, err := s.Migrations.V1MigrationsCreateKeys(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/liveness"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "liveness"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Liveness.V1Liveness(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/keys.createKey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "createKey"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.CreateKeyRequestBody{
                    APIID: "api_123",
                    Name: unkeygo.String("my key"),
                    OwnerID: unkeygo.String("team_123"),
                    Meta: map[string]any{
                        "billingTier": "PRO",
                        "trialEnds": "2023-06-16T17:16:37.161Z",
                    },
                    Roles: []string{
                        "admin",
                        "finance",
                    },
                    Expires: unkeygo.Int64(1623869797161),
                    Remaining: unkeygo.Int64(1000),
                    Refill: &operations.Refill{
                        Interval: operations.IntervalDaily,
                        Amount: 100,
                    },
                    Ratelimit: &operations.Ratelimit{
                        Limit: 10,
                        Duration: 60000,
                    },
                    Enabled: unkeygo.Bool(false),
                }
                ctx := context.Background()
                res, err := s.Keys.CreateKey(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/v1/keys.getVerifications"]["get"]
    update:
      "x-codeSamples":
        - "lang": "go"
          "label": "getVerifications"
          "source": |-
            package main

            import(
            	unkeygo "github.com/unkeyed/unkey-go"
            	"github.com/unkeyed/unkey-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := unkeygo.New(
                    unkeygo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.GetVerificationsRequest{
                    KeyID: unkeygo.String("key_1234"),
                    OwnerID: unkeygo.String("chronark"),
                    Start: unkeygo.Int64(1620000000000),
                    End: unkeygo.Int64(1620000000000),
                    Granularity: operations.GranularityDay.ToPointer(),
                }
                ctx := context.Background()
                res, err := s.Keys.GetVerifications(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
