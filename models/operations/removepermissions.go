// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type RemovePermissionsPermissions2 struct {
	// The name of the permission
	Name string `json:"name"`
}

func (o *RemovePermissionsPermissions2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type RemovePermissionsPermissions1 struct {
	// The id of the permission.
	ID string `json:"id"`
}

func (o *RemovePermissionsPermissions1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type RemovePermissionsPermissionsType string

const (
	RemovePermissionsPermissionsTypeRemovePermissionsPermissions1 RemovePermissionsPermissionsType = "removePermissions_permissions_1"
	RemovePermissionsPermissionsTypeRemovePermissionsPermissions2 RemovePermissionsPermissionsType = "removePermissions_permissions_2"
)

type RemovePermissionsPermissions struct {
	RemovePermissionsPermissions1 *RemovePermissionsPermissions1
	RemovePermissionsPermissions2 *RemovePermissionsPermissions2

	Type RemovePermissionsPermissionsType
}

func CreateRemovePermissionsPermissionsRemovePermissionsPermissions1(removePermissionsPermissions1 RemovePermissionsPermissions1) RemovePermissionsPermissions {
	typ := RemovePermissionsPermissionsTypeRemovePermissionsPermissions1

	return RemovePermissionsPermissions{
		RemovePermissionsPermissions1: &removePermissionsPermissions1,
		Type:                          typ,
	}
}

func CreateRemovePermissionsPermissionsRemovePermissionsPermissions2(removePermissionsPermissions2 RemovePermissionsPermissions2) RemovePermissionsPermissions {
	typ := RemovePermissionsPermissionsTypeRemovePermissionsPermissions2

	return RemovePermissionsPermissions{
		RemovePermissionsPermissions2: &removePermissionsPermissions2,
		Type:                          typ,
	}
}

func (u *RemovePermissionsPermissions) UnmarshalJSON(data []byte) error {

	var removePermissionsPermissions1 RemovePermissionsPermissions1 = RemovePermissionsPermissions1{}
	if err := utils.UnmarshalJSON(data, &removePermissionsPermissions1, "", true, true); err == nil {
		u.RemovePermissionsPermissions1 = &removePermissionsPermissions1
		u.Type = RemovePermissionsPermissionsTypeRemovePermissionsPermissions1
		return nil
	}

	var removePermissionsPermissions2 RemovePermissionsPermissions2 = RemovePermissionsPermissions2{}
	if err := utils.UnmarshalJSON(data, &removePermissionsPermissions2, "", true, true); err == nil {
		u.RemovePermissionsPermissions2 = &removePermissionsPermissions2
		u.Type = RemovePermissionsPermissionsTypeRemovePermissionsPermissions2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemovePermissionsPermissions", string(data))
}

func (u RemovePermissionsPermissions) MarshalJSON() ([]byte, error) {
	if u.RemovePermissionsPermissions1 != nil {
		return utils.MarshalJSON(u.RemovePermissionsPermissions1, "", true)
	}

	if u.RemovePermissionsPermissions2 != nil {
		return utils.MarshalJSON(u.RemovePermissionsPermissions2, "", true)
	}

	return nil, errors.New("could not marshal union type RemovePermissionsPermissions: all fields are null")
}

type RemovePermissionsRequestBody struct {
	// The id of the key.
	KeyID string `json:"keyId"`
	// The permissions you want to remove from this key
	Permissions []RemovePermissionsPermissions `json:"permissions"`
}

func (o *RemovePermissionsRequestBody) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *RemovePermissionsRequestBody) GetPermissions() []RemovePermissionsPermissions {
	if o == nil {
		return []RemovePermissionsPermissions{}
	}
	return o.Permissions
}

// RemovePermissionsResponseBody - Success
type RemovePermissionsResponseBody struct {
}

type RemovePermissionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *RemovePermissionsResponseBody
}

func (o *RemovePermissionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RemovePermissionsResponse) GetObject() *RemovePermissionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
