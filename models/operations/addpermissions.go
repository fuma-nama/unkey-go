// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type AddPermissionsPermissions2 struct {
	// The name of the permission
	Name string `json:"name"`
	// Set to true to automatically create the permission if it does not yet exist.
	Create *bool `json:"create,omitempty"`
}

func (o *AddPermissionsPermissions2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AddPermissionsPermissions2) GetCreate() *bool {
	if o == nil {
		return nil
	}
	return o.Create
}

type AddPermissionsPermissions1 struct {
	// The id of the permission.
	ID string `json:"id"`
}

func (o *AddPermissionsPermissions1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type AddPermissionsPermissionsType string

const (
	AddPermissionsPermissionsTypeAddPermissionsPermissions1 AddPermissionsPermissionsType = "addPermissions_permissions_1"
	AddPermissionsPermissionsTypeAddPermissionsPermissions2 AddPermissionsPermissionsType = "addPermissions_permissions_2"
)

type AddPermissionsPermissions struct {
	AddPermissionsPermissions1 *AddPermissionsPermissions1
	AddPermissionsPermissions2 *AddPermissionsPermissions2

	Type AddPermissionsPermissionsType
}

func CreateAddPermissionsPermissionsAddPermissionsPermissions1(addPermissionsPermissions1 AddPermissionsPermissions1) AddPermissionsPermissions {
	typ := AddPermissionsPermissionsTypeAddPermissionsPermissions1

	return AddPermissionsPermissions{
		AddPermissionsPermissions1: &addPermissionsPermissions1,
		Type:                       typ,
	}
}

func CreateAddPermissionsPermissionsAddPermissionsPermissions2(addPermissionsPermissions2 AddPermissionsPermissions2) AddPermissionsPermissions {
	typ := AddPermissionsPermissionsTypeAddPermissionsPermissions2

	return AddPermissionsPermissions{
		AddPermissionsPermissions2: &addPermissionsPermissions2,
		Type:                       typ,
	}
}

func (u *AddPermissionsPermissions) UnmarshalJSON(data []byte) error {

	var addPermissionsPermissions1 AddPermissionsPermissions1 = AddPermissionsPermissions1{}
	if err := utils.UnmarshalJSON(data, &addPermissionsPermissions1, "", true, true); err == nil {
		u.AddPermissionsPermissions1 = &addPermissionsPermissions1
		u.Type = AddPermissionsPermissionsTypeAddPermissionsPermissions1
		return nil
	}

	var addPermissionsPermissions2 AddPermissionsPermissions2 = AddPermissionsPermissions2{}
	if err := utils.UnmarshalJSON(data, &addPermissionsPermissions2, "", true, true); err == nil {
		u.AddPermissionsPermissions2 = &addPermissionsPermissions2
		u.Type = AddPermissionsPermissionsTypeAddPermissionsPermissions2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AddPermissionsPermissions", string(data))
}

func (u AddPermissionsPermissions) MarshalJSON() ([]byte, error) {
	if u.AddPermissionsPermissions1 != nil {
		return utils.MarshalJSON(u.AddPermissionsPermissions1, "", true)
	}

	if u.AddPermissionsPermissions2 != nil {
		return utils.MarshalJSON(u.AddPermissionsPermissions2, "", true)
	}

	return nil, errors.New("could not marshal union type AddPermissionsPermissions: all fields are null")
}

type AddPermissionsRequestBody struct {
	// The id of the key.
	KeyID string `json:"keyId"`
	// The permissions you want to add to this key
	Permissions []AddPermissionsPermissions `json:"permissions"`
}

func (o *AddPermissionsRequestBody) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *AddPermissionsRequestBody) GetPermissions() []AddPermissionsPermissions {
	if o == nil {
		return []AddPermissionsPermissions{}
	}
	return o.Permissions
}

type ResponseBody struct {
	// The id of the permission. This is used internally
	ID string `json:"id"`
	// The name of the permission
	Name string `json:"name"`
}

func (o *ResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type AddPermissionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// All currently connected permissions
	ResponseBodies []ResponseBody
}

func (o *AddPermissionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AddPermissionsResponse) GetResponseBodies() []ResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
