// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type Two struct {
	// The name of the permission
	Name string `json:"name"`
	// Set to true to automatically create the permission if it does not yet exist.
	Create *bool `json:"create,omitempty"`
}

func (o *Two) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Two) GetCreate() *bool {
	if o == nil {
		return nil
	}
	return o.Create
}

type One struct {
	// The id of the permission.
	ID string `json:"id"`
}

func (o *One) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type PermissionsType string

const (
	PermissionsTypeOne PermissionsType = "1"
	PermissionsTypeTwo PermissionsType = "2"
)

type Permissions struct {
	One *One
	Two *Two

	Type PermissionsType
}

func CreatePermissionsOne(one One) Permissions {
	typ := PermissionsTypeOne

	return Permissions{
		One:  &one,
		Type: typ,
	}
}

func CreatePermissionsTwo(two Two) Permissions {
	typ := PermissionsTypeTwo

	return Permissions{
		Two:  &two,
		Type: typ,
	}
}

func (u *Permissions) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = PermissionsTypeOne
		return nil
	}

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = PermissionsTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Permissions", string(data))
}

func (u Permissions) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type Permissions: all fields are null")
}

type AddPermissionsRequestBody struct {
	// The id of the key.
	KeyID string `json:"keyId"`
	// The permissions you want to add to this key
	Permissions []Permissions `json:"permissions"`
}

func (o *AddPermissionsRequestBody) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *AddPermissionsRequestBody) GetPermissions() []Permissions {
	if o == nil {
		return []Permissions{}
	}
	return o.Permissions
}

type ResponseBody struct {
	// The id of the permission. This is used internally
	ID string `json:"id"`
	// The name of the permission
	Name string `json:"name"`
}

func (o *ResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type AddPermissionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// All currently connected permissions
	ResponseBodies []ResponseBody
}

func (o *AddPermissionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AddPermissionsResponse) GetResponseBodies() []ResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
