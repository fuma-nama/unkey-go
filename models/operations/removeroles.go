// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type RemoveRolesRoles2 struct {
	// The name of the role
	Name string `json:"name"`
}

func (o *RemoveRolesRoles2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type RemoveRolesRoles1 struct {
	// The id of the role.
	ID string `json:"id"`
}

func (o *RemoveRolesRoles1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type RemoveRolesRolesType string

const (
	RemoveRolesRolesTypeRemoveRolesRoles1 RemoveRolesRolesType = "removeRoles_roles_1"
	RemoveRolesRolesTypeRemoveRolesRoles2 RemoveRolesRolesType = "removeRoles_roles_2"
)

type RemoveRolesRoles struct {
	RemoveRolesRoles1 *RemoveRolesRoles1
	RemoveRolesRoles2 *RemoveRolesRoles2

	Type RemoveRolesRolesType
}

func CreateRemoveRolesRolesRemoveRolesRoles1(removeRolesRoles1 RemoveRolesRoles1) RemoveRolesRoles {
	typ := RemoveRolesRolesTypeRemoveRolesRoles1

	return RemoveRolesRoles{
		RemoveRolesRoles1: &removeRolesRoles1,
		Type:              typ,
	}
}

func CreateRemoveRolesRolesRemoveRolesRoles2(removeRolesRoles2 RemoveRolesRoles2) RemoveRolesRoles {
	typ := RemoveRolesRolesTypeRemoveRolesRoles2

	return RemoveRolesRoles{
		RemoveRolesRoles2: &removeRolesRoles2,
		Type:              typ,
	}
}

func (u *RemoveRolesRoles) UnmarshalJSON(data []byte) error {

	var removeRolesRoles1 RemoveRolesRoles1 = RemoveRolesRoles1{}
	if err := utils.UnmarshalJSON(data, &removeRolesRoles1, "", true, true); err == nil {
		u.RemoveRolesRoles1 = &removeRolesRoles1
		u.Type = RemoveRolesRolesTypeRemoveRolesRoles1
		return nil
	}

	var removeRolesRoles2 RemoveRolesRoles2 = RemoveRolesRoles2{}
	if err := utils.UnmarshalJSON(data, &removeRolesRoles2, "", true, true); err == nil {
		u.RemoveRolesRoles2 = &removeRolesRoles2
		u.Type = RemoveRolesRolesTypeRemoveRolesRoles2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveRolesRoles", string(data))
}

func (u RemoveRolesRoles) MarshalJSON() ([]byte, error) {
	if u.RemoveRolesRoles1 != nil {
		return utils.MarshalJSON(u.RemoveRolesRoles1, "", true)
	}

	if u.RemoveRolesRoles2 != nil {
		return utils.MarshalJSON(u.RemoveRolesRoles2, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveRolesRoles: all fields are null")
}

type RemoveRolesRequestBody struct {
	// The id of the key.
	KeyID string `json:"keyId"`
	// The roles you want to remove from this key
	Roles []RemoveRolesRoles `json:"roles"`
}

func (o *RemoveRolesRequestBody) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *RemoveRolesRequestBody) GetRoles() []RemoveRolesRoles {
	if o == nil {
		return []RemoveRolesRoles{}
	}
	return o.Roles
}

// RemoveRolesResponseBody - Success
type RemoveRolesResponseBody struct {
}

type RemoveRolesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *RemoveRolesResponseBody
}

func (o *RemoveRolesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RemoveRolesResponse) GetObject() *RemoveRolesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
