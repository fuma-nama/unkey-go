// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type SetPermissionsPermissions2 struct {
	// The name of the permission
	Name string `json:"name"`
	// Set to true to automatically create the permission if it does not yet exist.
	Create *bool `json:"create,omitempty"`
}

func (o *SetPermissionsPermissions2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SetPermissionsPermissions2) GetCreate() *bool {
	if o == nil {
		return nil
	}
	return o.Create
}

type SetPermissionsPermissions1 struct {
	// The id of the permission.
	ID string `json:"id"`
}

func (o *SetPermissionsPermissions1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type SetPermissionsPermissionsType string

const (
	SetPermissionsPermissionsTypeSetPermissionsPermissions1 SetPermissionsPermissionsType = "setPermissions_permissions_1"
	SetPermissionsPermissionsTypeSetPermissionsPermissions2 SetPermissionsPermissionsType = "setPermissions_permissions_2"
)

type SetPermissionsPermissions struct {
	SetPermissionsPermissions1 *SetPermissionsPermissions1
	SetPermissionsPermissions2 *SetPermissionsPermissions2

	Type SetPermissionsPermissionsType
}

func CreateSetPermissionsPermissionsSetPermissionsPermissions1(setPermissionsPermissions1 SetPermissionsPermissions1) SetPermissionsPermissions {
	typ := SetPermissionsPermissionsTypeSetPermissionsPermissions1

	return SetPermissionsPermissions{
		SetPermissionsPermissions1: &setPermissionsPermissions1,
		Type:                       typ,
	}
}

func CreateSetPermissionsPermissionsSetPermissionsPermissions2(setPermissionsPermissions2 SetPermissionsPermissions2) SetPermissionsPermissions {
	typ := SetPermissionsPermissionsTypeSetPermissionsPermissions2

	return SetPermissionsPermissions{
		SetPermissionsPermissions2: &setPermissionsPermissions2,
		Type:                       typ,
	}
}

func (u *SetPermissionsPermissions) UnmarshalJSON(data []byte) error {

	var setPermissionsPermissions1 SetPermissionsPermissions1 = SetPermissionsPermissions1{}
	if err := utils.UnmarshalJSON(data, &setPermissionsPermissions1, "", true, true); err == nil {
		u.SetPermissionsPermissions1 = &setPermissionsPermissions1
		u.Type = SetPermissionsPermissionsTypeSetPermissionsPermissions1
		return nil
	}

	var setPermissionsPermissions2 SetPermissionsPermissions2 = SetPermissionsPermissions2{}
	if err := utils.UnmarshalJSON(data, &setPermissionsPermissions2, "", true, true); err == nil {
		u.SetPermissionsPermissions2 = &setPermissionsPermissions2
		u.Type = SetPermissionsPermissionsTypeSetPermissionsPermissions2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SetPermissionsPermissions", string(data))
}

func (u SetPermissionsPermissions) MarshalJSON() ([]byte, error) {
	if u.SetPermissionsPermissions1 != nil {
		return utils.MarshalJSON(u.SetPermissionsPermissions1, "", true)
	}

	if u.SetPermissionsPermissions2 != nil {
		return utils.MarshalJSON(u.SetPermissionsPermissions2, "", true)
	}

	return nil, errors.New("could not marshal union type SetPermissionsPermissions: all fields are null")
}

type SetPermissionsRequestBody struct {
	// The id of the key.
	KeyID string `json:"keyId"`
	// The permissions you want to set for this key. This overwrites all existing permissions.
	Permissions []SetPermissionsPermissions `json:"permissions"`
}

func (o *SetPermissionsRequestBody) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *SetPermissionsRequestBody) GetPermissions() []SetPermissionsPermissions {
	if o == nil {
		return []SetPermissionsPermissions{}
	}
	return o.Permissions
}

type SetPermissionsResponseBody struct {
	// The id of the permission. This is used internally
	ID string `json:"id"`
	// The name of the permission
	Name string `json:"name"`
}

func (o *SetPermissionsResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SetPermissionsResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type SetPermissionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// All currently connected permissions
	ResponseBodies []SetPermissionsResponseBody
}

func (o *SetPermissionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SetPermissionsResponse) GetResponseBodies() []SetPermissionsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
