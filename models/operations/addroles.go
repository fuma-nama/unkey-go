// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type Roles2 struct {
	// The name of the role
	Name string `json:"name"`
	// Set to true to automatically create the role if it does not yet exist.
	Create *bool `json:"create,omitempty"`
}

func (o *Roles2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Roles2) GetCreate() *bool {
	if o == nil {
		return nil
	}
	return o.Create
}

type Roles1 struct {
	// The id of the role.
	ID string `json:"id"`
}

func (o *Roles1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type RolesType string

const (
	RolesTypeRoles1 RolesType = "roles_1"
	RolesTypeRoles2 RolesType = "roles_2"
)

type Roles struct {
	Roles1 *Roles1
	Roles2 *Roles2

	Type RolesType
}

func CreateRolesRoles1(roles1 Roles1) Roles {
	typ := RolesTypeRoles1

	return Roles{
		Roles1: &roles1,
		Type:   typ,
	}
}

func CreateRolesRoles2(roles2 Roles2) Roles {
	typ := RolesTypeRoles2

	return Roles{
		Roles2: &roles2,
		Type:   typ,
	}
}

func (u *Roles) UnmarshalJSON(data []byte) error {

	var roles1 Roles1 = Roles1{}
	if err := utils.UnmarshalJSON(data, &roles1, "", true, true); err == nil {
		u.Roles1 = &roles1
		u.Type = RolesTypeRoles1
		return nil
	}

	var roles2 Roles2 = Roles2{}
	if err := utils.UnmarshalJSON(data, &roles2, "", true, true); err == nil {
		u.Roles2 = &roles2
		u.Type = RolesTypeRoles2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Roles", string(data))
}

func (u Roles) MarshalJSON() ([]byte, error) {
	if u.Roles1 != nil {
		return utils.MarshalJSON(u.Roles1, "", true)
	}

	if u.Roles2 != nil {
		return utils.MarshalJSON(u.Roles2, "", true)
	}

	return nil, errors.New("could not marshal union type Roles: all fields are null")
}

type AddRolesRequestBody struct {
	// The id of the key.
	KeyID string `json:"keyId"`
	// The roles you want to add to this key
	Roles []Roles `json:"roles"`
}

func (o *AddRolesRequestBody) GetKeyID() string {
	if o == nil {
		return ""
	}
	return o.KeyID
}

func (o *AddRolesRequestBody) GetRoles() []Roles {
	if o == nil {
		return []Roles{}
	}
	return o.Roles
}

type AddRolesResponseBody struct {
	// The id of the role. This is used internally
	ID string `json:"id"`
	// The name of the role
	Name string `json:"name"`
}

func (o *AddRolesResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AddRolesResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type AddRolesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// All currently connected roles
	ResponseBodies []AddRolesResponseBody
}

func (o *AddRolesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AddRolesResponse) GetResponseBodies() []AddRolesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
