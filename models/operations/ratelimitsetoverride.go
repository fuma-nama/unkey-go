// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

type RatelimitSetOverrideRequestBody struct {
	// The id of the namespace. Either namespaceId or namespaceName must be provided
	NamespaceID *string `json:"namespaceId,omitempty"`
	// Namespaces group different limits together for better analytics. You might have a namespace for your public API and one for internal tRPC routes. Wildcards can also be used, more info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
	NamespaceName *string `json:"namespaceName,omitempty"`
	// Identifier of your user, this can be their userId, an email, an ip or anything else. Wildcards ( * ) can be used to match multiple identifiers, More info can be found at https://www.unkey.com/docs/ratelimiting/overrides#wildcard-rules
	Identifier string `json:"identifier"`
	// How many requests may pass in a given window.
	Limit int64 `json:"limit"`
	// The window duration in milliseconds
	Duration int64 `json:"duration"`
	// Async will return a response immediately, lowering latency at the cost of accuracy.
	Async *bool `default:"false" json:"async"`
}

func (r RatelimitSetOverrideRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RatelimitSetOverrideRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RatelimitSetOverrideRequestBody) GetNamespaceID() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceID
}

func (o *RatelimitSetOverrideRequestBody) GetNamespaceName() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceName
}

func (o *RatelimitSetOverrideRequestBody) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *RatelimitSetOverrideRequestBody) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

func (o *RatelimitSetOverrideRequestBody) GetDuration() int64 {
	if o == nil {
		return 0
	}
	return o.Duration
}

func (o *RatelimitSetOverrideRequestBody) GetAsync() *bool {
	if o == nil {
		return nil
	}
	return o.Async
}

// RatelimitSetOverrideResponseBody - Sucessfully created a ratelimit override
type RatelimitSetOverrideResponseBody struct {
	// The id of the override. This is used internally
	OverrideID string `json:"overrideId"`
}

func (o *RatelimitSetOverrideResponseBody) GetOverrideID() string {
	if o == nil {
		return ""
	}
	return o.OverrideID
}

type RatelimitSetOverrideResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Sucessfully created a ratelimit override
	Object *RatelimitSetOverrideResponseBody
}

func (o *RatelimitSetOverrideResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RatelimitSetOverrideResponse) GetObject() *RatelimitSetOverrideResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
